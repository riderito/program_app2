# Название всего пайплайна
name: CI/CD pipeline

# Триггеры запуска пайплайна
on:
  # При пуше в ветку main
  push:
    branches: [ main ]
  # Создание pull request
  pull_request:
  # Ручной запуск через интерфейс GitHub
  workflow_dispatch:

# Определяет выполняемые задачи
jobs:
  # Сама задача
  test:
    # Виртуальная машина, на которой будет выполняться задача
    runs-on: ubuntu-latest
    # Определяет последовательность шагов
    steps:
      # Получение кода из репозитория
      - name: Checkout
        uses: actions/checkout@v4

      # Настройка Python окружения
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Обновляем pip до последней версии
          pip install -r requirements.txt  # Устанавливаем библиотеки из файла

      # Проверка кода на соответствие стандартам (линтер)
      - name: Linting
        run: flake8 .

      # Запуск тестов и проверка покрытия кода
      - name: Tests + coverage
        run: |
          coverage run -m pytest  # Запускаем тесты с измерением покрытия
          coverage report --fail-under=80 # Проверяем что покрытие не менее 80%

      # Проверка безопасности кода
      - name: Bandit
        run: bandit -r . --exclude test_*.py  # Исключаем файл с тестами (ругается на assert)

      # Уведомление в Telegram
      - name: Final notification
        # Выполняется всегда, даже если предыдущие шаги упали
        if: ${{ always() }}
        # Определяем текст сообщения в зависимости от статуса выполнения jobы
        run: |
          if [ "${{ job.status }}" = "failure" ]; then
            text="❌ Пайплайн завершился c ошибкой! Репозиторий: ${{ github.repository }}"
          elif [ "${{ job.status }}" = "cancelled" ]; then
            text="⚠️ Пайплайн был отменён. Репозиторий: ${{ github.repository }}"
          else
            text="✅ Пайплайн завершился успешно! Репозиторий: ${{ github.repository }}"
          fi

          # Отправка POST-запроса к Telegram API, используя заданные переменные-секреты
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.CHAT_ID }}" \
            -d text="$text"
